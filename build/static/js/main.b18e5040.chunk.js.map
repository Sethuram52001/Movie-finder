{"version":3,"sources":["components/Header.js","components/Search.js","components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","Search","onSubmit","this","props","getMovie","action","type","name","Movie","title","src","poster","director","actors","plot","released","runtime","imdb_rating","App","state","undefined","e","a","preventDefault","searchValue","target","elements","value","fetch","api_call","json","data","setState","Title","Director","Actors","Plot","Released","Runtime","imdbRating","Poster","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAceA,E,uKAVX,OACE,6BACE,yBAAKC,UAAU,UACb,sD,GALWC,aCaNC,E,uKAXX,OACE,6BACE,0BAAMC,SAAUC,KAAKC,MAAMC,SAAUC,OAAO,IAC1C,2BAAOC,KAAK,SAASC,KAAK,gBAC1B,uBAAGT,UAAU,uB,GANFC,aCsBNS,E,uKApBX,OACE,6BACE,yBAAKV,UAAU,oBACZI,KAAKC,MAAMM,OAAS,yBAAKC,IAAG,UAAKR,KAAKC,MAAMQ,WAE/C,yBAAKb,UAAU,WACZI,KAAKC,MAAMM,OAAS,qCAAWP,KAAKC,MAAMM,OAC1CP,KAAKC,MAAMM,OAAS,wCAAcP,KAAKC,MAAMS,UAC7CV,KAAKC,MAAMM,OAAS,sCAAYP,KAAKC,MAAMU,QAC3CX,KAAKC,MAAMM,OAAS,oCAAUP,KAAKC,MAAMW,MACzCZ,KAAKC,MAAMM,OAAS,wCAAcP,KAAKC,MAAMY,UAC7Cb,KAAKC,MAAMM,OAAS,uCAAaP,KAAKC,MAAMa,SAE5Cd,KAAKC,MAAMM,OAAS,2CAAiBP,KAAKC,MAAMc,mB,GAfvClB,aC4ELmB,E,4MAtEbC,MAAQ,CACNV,WAAOW,EACPR,cAAUQ,EACVP,YAAQO,EACRN,UAAMM,EACNL,cAAUK,EACVJ,aAASI,EACTH,iBAAaG,EACbT,YAAQS,G,EAGVhB,S,uCAAW,WAAOiB,GAAP,mBAAAC,EAAA,6DACTD,EAAEE,iBAEIC,EAAcH,EAAEI,OAAOC,SAASF,YAAYG,MAHzC,SAQcC,MAAM,+BAAD,OACKJ,EADL,qBARnB,cAQHK,EARG,gBAYUA,EAASC,OAZnB,OAYHC,EAZG,OAcLP,EACF,EAAKQ,SAAS,CACZvB,MAAOsB,EAAKE,MACZrB,SAAUmB,EAAKG,SACfrB,OAAQkB,EAAKI,OACbrB,KAAMiB,EAAKK,KACXrB,SAAUgB,EAAKM,SACfrB,QAASe,EAAKO,QACdrB,YAAac,EAAKQ,WAClB5B,OAAQoB,EAAKS,SAGf,EAAKR,SAAS,CACZvB,WAAOW,EACPR,cAAUQ,EACVP,YAAQO,EACRN,UAAMM,EACNL,cAAUK,EACVJ,aAASI,EACTH,iBAAaG,EACbT,YAAQS,IAlCH,2C,6GAwCT,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQhB,SAAUF,KAAKE,WACvB,kBAAC,EAAD,CACEK,MAAOP,KAAKiB,MAAMV,MAClBG,SAAUV,KAAKiB,MAAMP,SACrBC,OAAQX,KAAKiB,MAAMN,OACnBC,KAAMZ,KAAKiB,MAAML,KACjBC,SAAUb,KAAKiB,MAAMJ,SACrBC,QAASd,KAAKiB,MAAMH,QACpBC,YAAaf,KAAKiB,MAAMF,YACxBN,OAAQT,KAAKiB,MAAMR,c,GAhEXZ,a,MCKE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b18e5040.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"header\">\r\n          <h2>Hooked to Movies</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Search extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.props.getMovie} action=\"\">\r\n          <input type=\"search\" name=\"searchValue\"></input>\r\n          <i className=\"fa fa-search\"></i>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n\r\n{\r\n  /*<form onSubmit={this.props.getMovie} action=\"\">\r\n            <input type=\"text\" name=\"searchValue\" placeholder=\"search\"></input>\r\n            <button>\r\n              <i className=\"fa fa-search\"></i>\r\n            </button>\r\n          </form> */\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass Movie extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container-Poster\">\r\n          {this.props.title && <img src={`${this.props.poster}`}></img>}\r\n        </div>\r\n        <div className=\"content\">\r\n          {this.props.title && <p>Title: {this.props.title}</p>}\r\n          {this.props.title && <p>Director: {this.props.director}</p>}\r\n          {this.props.title && <p>Actors: {this.props.actors}</p>}\r\n          {this.props.title && <p>Plot: {this.props.plot}</p>}\r\n          {this.props.title && <p>Released: {this.props.released}</p>}\r\n          {this.props.title && <p>Runtime: {this.props.runtime}</p>}\r\n          {/*<p>Imdb Rating: {this.props.imdb_rating}</p>*/}\r\n          {this.props.title && <p>Imdb Rating: {this.props.imdb_rating}</p>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Movie;\r\n","import React, { Component } from \"react\";\nimport Header from \"./components/Header\";\nimport Search from \"./components/Search\";\nimport Movie from \"./components/Movie\";\n\nconst API_KEY = \"106206eb\";\n\nclass App extends Component {\n  state = {\n    title: undefined,\n    director: undefined,\n    actors: undefined,\n    plot: undefined,\n    released: undefined,\n    runtime: undefined,\n    imdb_rating: undefined,\n    poster: undefined,\n  };\n\n  getMovie = async (e) => {\n    e.preventDefault();\n\n    const searchValue = e.target.elements.searchValue.value;\n\n    /*const api_call = await fetch(\n      ` http://www.omdbapi.com/?i=tt3896198&apikey=106206eb`\n    );*/\n    const api_call = await fetch(\n      ` https://www.omdbapi.com/?t=${searchValue}&apikey=106206eb`\n    );\n\n    const data = await api_call.json();\n    /*console.log(data);*/\n    if (searchValue) {\n      this.setState({\n        title: data.Title,\n        director: data.Director,\n        actors: data.Actors,\n        plot: data.Plot,\n        released: data.Released,\n        runtime: data.Runtime,\n        imdb_rating: data.imdbRating,\n        poster: data.Poster,\n      });\n    } else {\n      this.setState({\n        title: undefined,\n        director: undefined,\n        actors: undefined,\n        plot: undefined,\n        released: undefined,\n        runtime: undefined,\n        imdb_rating: undefined,\n        poster: undefined,\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Search getMovie={this.getMovie}></Search>\n        <Movie\n          title={this.state.title}\n          director={this.state.director}\n          actors={this.state.actors}\n          plot={this.state.plot}\n          released={this.state.released}\n          runtime={this.state.runtime}\n          imdb_rating={this.state.imdb_rating}\n          poster={this.state.poster}\n        ></Movie>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"./App.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}